var __webpack_modules__={575:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Q": () => (/* binding */ Core)\n});\n\n;// CONCATENATED MODULE: ./src/renderer/modules/events.ts\nconst Events=new EventTarget;/* harmony default export */ const events = (Events);\n;// CONCATENATED MODULE: ./src/renderer/modules/logger.ts\nvar Logger;(function(Logger){function parseType(type){switch(type){case"error":case"info":case"error":return type;default:return"log"}}function logMessage(type,module,...message){console[parseType(type)](`%c[KernelSettings]%c %c[${module}]%c`,"color: #A8D46B; font-weight: 700;","","color: #A8D46B","",...message)}function log(module,...message){logMessage("log",module,...message)}Logger.log=log;function info(module,...message){logMessage("info",module,...message)}Logger.info=info;function warn(module,...message){logMessage("warn",module,...message)}Logger.warn=warn;function error(module,...message){logMessage("error",module,...message)}Logger.error=error})(Logger||(Logger={}))\n;// CONCATENATED MODULE: ./src/renderer/modules/devserver.ts\nconst fs=SettingsNative.requireModule("fs");const path=SettingsNative.requireModule("path");var DevServer;(function(DevServer1){var ws=DevServer1.ws=null;var expectedClose=DevServer1.expectedClose=false;const tryJSON=function(json){try{return JSON.parse(json)}catch(error){return false}};function close(){if(!ws)return;Logger.log("DevServer","Closing WebSocket");DevServer.ws=ws=null}DevServer1.close=close;function initialize(){const win=window;if(win.KernelDevServer&&win.KernelDevServer.ws!=null){Logger.log("DevServer","Taking over socket");ws=DevServer.ws=win.KernelDevServer.ws}else{Logger.log("DevServer","Loading development server...");ws=DevServer.ws=new WebSocket("ws://localhost:5656")}win.KernelDevServer=DevServer;ws.onmessage=handleMessage;ws.onerror=error=>{Logger.error("DevServer","Fatal error:",error)};ws.onclose=()=>{DevServer.ws=ws=null;if(!expectedClose)Logger.error("DevServer","Connection closed...")}}DevServer1.initialize=initialize;async function reloadCore(){Logger.log("DevServer","Reloading core...");events.dispatchEvent(new Event("reload-core"));const content=fs.readFile(path.resolve(fs.current,"renderer.js"),"utf8");const script=document.head.appendChild(Object.assign(document.createElement("script"),{type:"module",textContent:content+";__webpack_exports__Core.start();",onload:()=>script.remove()}))}DevServer1.reloadCore=reloadCore;function reloadStyles(){events.dispatchEvent(new Event("reload-css"))}DevServer1.reloadStyles=reloadStyles;function reload(type){switch(type){case"core":{reloadCore()}break;case"styles":{reloadStyles()}break}}DevServer1.reload=reload;var handleMessage=DevServer1.handleMessage=({data})=>{const message=tryJSON(data);if(!message)return Logger.error("DevServer","Unable to parse message:",data);switch(message.operation){case"HELLO":{send("HELLO",{client:`Discord->${window.DiscordNative.app.getReleaseChannel()}`});Logger.log("DevServer","WS Connected")}break;case"RELOAD_STYLES":{reloadStyles()}break;case"RELOAD_CORE":{reloadCore()}break;default:{Logger.log("DevServer","Unknown operation:",message.operation)}}};function send(operation,data){if(!ws)throw"Tried sending message without connection established";ws.send(JSON.stringify({operation:operation,data:data}))}DevServer1.send=send})(DevServer||(DevServer={}))\n;// CONCATENATED MODULE: ./src/renderer/modules/storage.ts\nconst storage_fs=SettingsNative.requireModule("fs");const storage_path=SettingsNative.requireModule("path");var Storage;(function(Storage1){var listeners=Storage1.listeners=new Set;var location=Storage1.location="";var groups=Storage1.groups=new Map;function tryJSON(json){try{return JSON.parse(json)}catch(error){return error}}function emit(...args){const callbacks=[...listeners];for(let i=0;i<callbacks.length;i++){try{callbacks[i](...args)}catch(error){console.error(error)}}}Storage1.emit=emit;function on(listener){listeners.add(listener);return off.bind(listener)}Storage1.on=on;function off(listener){return listeners.delete(listener)}Storage1.off=off;function use(factory){const[state,setState]=React.useState(factory());React.useEffect(()=>{const remove=on(()=>{setState(factory())});return()=>void remove()},[]);return state}Storage1.use=use;function initialize(){location=Storage.location=storage_path.resolve(storage_fs.current,"..","..","..","storage","settings");if(!storage_fs.exists(location)){try{storage_fs.createDir(location,{recursive:true})}catch(error){return console.error(error)}}for(let files=storage_fs.readDir(location,"utf8"),i=0;i<files.length;i++){const file=files[i];if(!storage_fs.stats(storage_path.join(location,file)).isFile()||!file.endsWith(".json"))continue;const group=file.slice(0,file.indexOf(".json"));groups.set(group,tryJSON(storage_fs.readFile(storage_path.join(location,file),"utf8")))}}Storage1.initialize=initialize;function get(group,def=null){if(~group.indexOf(".")){const[id,...paths]=group.split(".");return paths.reduce((curr,name)=>curr?.[name],groups.get(id)??def)}return groups.get(group)??def}Storage1.get=get;function set(group,data){if(~group.indexOf(".")){const[id,...paths]=group.split(".");group=id;const prop=paths.pop();const stored=groups.get(id);if(stored!=null){const object=paths.reduce((curr,name)=>curr?.[name],groups.get(id));if(object==null)throw new Error("Group path not found!");object[prop]=data}else{const tree=paths.reduce((curr,name)=>{if(!curr[name])curr[name]={};return curr[name]},{});tree[prop]=data;groups.set(id,tree)}}else{groups.set(group,data)}storage_fs.writeFile(storage_path.join(Storage.location,group+".json"),JSON.stringify(groups.get(group),null,"\t"));emit(group)}Storage1.set=set})(Storage||(Storage={}))\n;// CONCATENATED MODULE: ./src/renderer/modules/memoize.ts\nfunction memoize(object){const keys=Object.keys(object);const clone={};for(let i=0;i<keys.length;i++){const key=keys[i];const descriptor=Object.getOwnPropertyDescriptor(object,key);if(!descriptor||!descriptor.get){clone[key]=object[key];continue}const getter=descriptor.get;let value=undefined;Object.defineProperty(clone,key,{configurable:true,enumerable:true,get(){return value!==undefined?value:value=getter()}})}return clone}\n;// CONCATENATED MODULE: ./src/renderer/modules/webpack.ts\nif(typeof Array.prototype.at!=="function"){Object.defineProperty(Array.prototype,"at",{value:function at(index){return index<0?this[this.length-Math.abs(index)]:this[index]},enumerable:false,configurable:true})}if(typeof setImmediate==="undefined"){window.setImmediate=callback=>setTimeout(callback,0)}class Filters{static byProps(...props){return module=>props.every(prop=>prop in module)}static byDisplayName(name,def=false){return module=>(def?module=module.default:module)&& typeof module==="function"&&module.displayName===name}static byTypeString(...strings){return module=>module.type&&(module=module.type?.toString())&&strings.every(str=>module.indexOf(str)> -1)}}class WebpackModule{cache=null;#listeners=new Set;get Filters(){return Filters}get chunkName(){return"webpackChunkdiscord_app"}get id(){return Symbol("kernel-settings")}constructor(){this.whenReady=this.waitForGlobal.then(()=>new Promise(async onReady=>{const[Dispatcher,UserStore]=await this.findByProps(["_dispatch","dispatch"],["getCurrentUser","_dispatchToken"],{cache:false,bulk:true,wait:true,forever:true});if(UserStore.getCurrentUser())return onReady();const listener=function(){Dispatcher.unsubscribe("START_SESSION",listener);Dispatcher.unsubscribe("CONNECTION_OPEN",listener);onReady()};Dispatcher.subscribe("START_SESSION",listener);Dispatcher.subscribe("CONNECTION_OPEN",listener)}));this.whenReady.then(()=>{let originalPush=window[this.chunkName].push;const handlePush=chunk=>{const[,modules]=chunk;for(const moduleId in modules){const originalModule=modules[moduleId];modules[moduleId]=(...args)=>{const[,exports]=args;originalModule.apply(originalModule,args);const listeners=[...this.#listeners];for(let i=0;i<listeners.length;i++){try{listeners[i](exports)}catch(error){console.error("[Webpack]","Could not fire callback listener:",error)}}};Object.assign(modules[moduleId],originalModule,{toString:originalModule.toString.bind(originalModule),__original:originalModule})}return originalPush.apply(window[this.chunkName],[chunk])};Object.defineProperty(window[this.chunkName],"push",{configurable:true,get:()=>handlePush,set:newPush=>{originalPush=newPush;Object.defineProperty(window[this.chunkName],"push",{value:handlePush,configurable:true,writable:true})}})})}addListener(listener){this.#listeners.add(listener);return()=>{this.#listeners.delete(listener)}}removeListener(listener){return this.#listeners.delete(listener)}findLazy(filter){const fromCache=this.findModule(filter);if(fromCache)return Promise.resolve(fromCache);return new Promise(resolve=>{const listener=m=>{const directMatch=filter(m);if(directMatch){resolve(m);return void remove()}if(!m.default)return;const defaultMatch=filter(m.default);if(!defaultMatch)return;resolve(m.default);remove()};const remove=this.addListener(listener)})}async waitFor(filter,{retries=100,all=false,forever=false,delay=50}={}){for(let i=0;i<retries||forever;i++){const module=this.findModule(filter,{all,cache:false});if(module)return module;await new Promise(res=>setTimeout(res,delay))}}parseOptions(args,filter=thing=>typeof thing==="object"&&thing!=null&&!Array.isArray(thing)){return[args,filter(args.at(-1))?args.pop():{}]}request(cache1=true){if(cache1&&this.cache)return this.cache;let req=undefined;if(Array.isArray(window[this.chunkName])){const chunk=[[this.id],{},__nested_webpack_require_3327__=>req=__nested_webpack_require_3327__];webpackChunkdiscord_app.push(chunk);webpackChunkdiscord_app.splice(webpackChunkdiscord_app.indexOf(chunk),1)}if(cache1)this.cache=req;return req}findModule(filter,{all=false,cache:cache1=true,force=false,default:defaultExports=false}={}){if(typeof filter!=="function")return void 0;const __nested_webpack_require_3661__=this.request(cache1);const found=[];let hasError=null;if(!__nested_webpack_require_3661__)return;const wrapFilter=function(module,index){try{return filter(module,index)}catch(error){hasError??=error;return false}};for(const id in __nested_webpack_require_3661__.c){const module=__nested_webpack_require_3661__.c[id].exports;if(!module||module===window)continue;switch(typeof module){case"object":{if(wrapFilter(module,id)){if(!all)return module;found.push(module)}if(module.__esModule&&module.default!=null&& typeof module.default!=="number"&&wrapFilter(module.default,id)){const exports=defaultExports?module:module.default;if(!all)return exports;found.push(exports)}if(force&&module.__esModule)for(const key in module){if(!module[key])continue;if(wrapFilter(module[key],id)){if(!all)return module[key];found.push(module[key])}}break}case"function":{if(wrapFilter(module,id)){if(!all)return module;found.push(module)}break}}}if(hasError){setImmediate(()=>{console.warn("[Webpack] filter threw an error. This can cause lag spikes at the user\'s end. Please fix asap.\\n\\n",hasError)})}return all?found:found[0]}findModules(filter){return this.findModule(filter,{all:true})}bulk(...options){const[filters,{wait=false,...rest}]=this.parseOptions(options);const found=new Array(filters.length);const searchFunction=wait?this.waitFor:this.findModule;const wrappedFilters=filters.map(filter=>{if(Array.isArray(filter))filter=Filters.byProps(...filter);if(typeof filter==="string")filter=Filters.byDisplayName(filter);return m=>{try{return filter(m)}catch(error){return false}}});const returnValue=searchFunction.call(this,module=>{for(let i=0;i<wrappedFilters.length;i++){const filter=wrappedFilters[i];if(typeof filter!=="function"||!filter(module)||found[i]!=null)continue;found[i]=module}return found.filter(String).length===filters.length},rest);if(wait)return returnValue.then(()=>found);return found}findByProps(...options){const[props,{bulk=false,wait=false,...rest}]=this.parseOptions(options);if(!bulk&&!wait){return this.findModule(Filters.byProps(...props),rest)}if(wait&&!bulk){return this.waitFor(Filters.byProps(...props),rest)}if(bulk){const filters=props.map(propsArray=>Filters.byProps(...propsArray)).concat({wait,...rest});return this.bulk(...filters)}return null}findByDisplayName(...options){const[displayNames,{bulk=false,wait=false,...rest}]=this.parseOptions(options);if(!bulk&&!wait){return this.findModule(Filters.byDisplayName(displayNames[0]),rest)}if(wait&&!bulk){return this.waitFor(Filters.byDisplayName(displayNames[0]),rest)}if(bulk){const filters=displayNames.map(filters.map(Filters.byDisplayName)).concat({wait,cache});return this.bulk(...filters)}return null}findIndex(filter){let foundIndex=-1;this.findModule((module,index)=>{if(filter(module))foundIndex=index});return foundIndex}atIndex(index){return this.request(true)?.c[index]}get waitForGlobal(){return new Promise(async onExists=>{while(!Array.isArray(window[this.chunkName])){await new Promise(setImmediate)}onExists()})}async wait(callback=null){return this.whenReady.then(()=>{typeof callback==="function"&&callback()})}get whenExists(){return this.waitForGlobal}on(event,listener){switch(event){case"LOADED":return this.whenReady.then(listener)}}get once(){return this.on}}const Webpack=new WebpackModule;/* harmony default export */ const webpack = (Webpack);\n;// CONCATENATED MODULE: ./src/renderer/components/discord.ts\nconst DiscordComponents=memoize({get Button(){return webpack.findByProps("BorderColors")},get Switch(){return webpack.findByDisplayName("Switch")},get Markdown(){return webpack.findModule(m=>m.displayName==="Markdown"&&"rules"in m)},get Header(){return webpack.findModule(m=>m.displayName==="Header"&&"Tags"in m)},get Text(){const names=new Set(["Text","LegacyText"]);return webpack.findModule(m=>names.has(m.displayName))},get Forms(){return webpack.findByProps("FormItem","FormTitle")},get Spinner(){return webpack.findByDisplayName("Spinner")},get Flex(){return webpack.findByDisplayName("Flex")},get Link(){return webpack.findByDisplayName("Anchor")},get Icons(){const icons=webpack.findModules(m=>typeof m==="function"&&m.displayName&&m.toString().indexOf("currentColor")> -1);return Object.fromEntries(icons.map(icon=>[icon.displayName,icon]))},get Tooltips(){const TooltipModule=webpack.findByProps("TooltipContainer");return{Container:TooltipModule.TooltipContainer,Tooltip:TooltipModule.default,...TooltipModule}}});/* harmony default export */ const discord = (DiscordComponents);\n;// CONCATENATED MODULE: ./src/renderer/components/card.tsx\nfunction _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}const kernel=window.kernel;const Electron=SettingsNative.requireModule("electron");function Icon({name,...props}){const IconComponent=discord.Icons[name]??(()=>null);props.size??="16";return React.createElement(IconComponent,_extends({},props,{width:props.size,height:props.size}))}function ToolButton({label,icon,onClick,danger=false}){const{Tooltips,Button}=discord;return React.createElement(Tooltips.Tooltip,{text:label,position:"top"},props=>React.createElement(Button,_extends({},props,{className:"kernel-toolbutton",look:Button.Looks.BLANK,size:Button.Sizes.NONE,onClick:onClick}),React.createElement(Icon,{size:"20",name:icon,color:danger?"#ed4245":undefined})))}function SwitchWrapper({value,onChange,disabled}){const{Switch}=discord;const[isChecked,setChecked]=React.useState(value);return React.createElement(Switch,{checked:isChecked,disabled:disabled,onChange:React.useCallback(()=>{if(disabled)return;onChange(!isChecked);setChecked(value=>!value)},[onChange,isChecked])})}function openItem(path){if(path.endsWith(".asar"))return Electron.showItemInFolder(path);Electron.openPath(path)}function KernelCard({pkg}){const{Markdown,Text}=discord;return React.createElement("div",{className:"kernel-card"},React.createElement("div",{className:"kernel-card-tools"},React.createElement(ToolButton,{label:"Open Path",icon:"Folder",onClick:()=>openItem(pkg.path)}),React.createElement(ToolButton,{danger:true,label:"Delete",icon:"Trash",onClick:()=>Electron.trashItem(pkg.path)})),React.createElement("div",{className:"kernel-card-header"},React.createElement(Text,{className:"kernel-card-name"},pkg.name)),pkg.description!=null&&React.createElement(Text,{className:"kernel-card-desc"},React.createElement(Markdown,null,pkg.description)),React.createElement("div",{className:"kernel-footer"},React.createElement(SwitchWrapper,{value:pkg.enabled,disabled:pkg.id==="kernel-settings",onChange:value=>{if(!value)kernel.packages.stopPackage(pkg.id);else kernel.packages.startPackage(pkg.id)}})))}\n;// CONCATENATED MODULE: ./src/renderer/components/panel.tsx\nconst panel_kernel=window.kernel;function KernelPanel(){const{Forms:{FormTitle}}=discord;return React.createElement("div",{className:"kernel-panel"},React.createElement(FormTitle,{tag:FormTitle.Tags.H1},"Packages"),React.createElement("div",{className:"kernel-card-scroller"},Object.values(panel_kernel.packages.getPackages()).map(pkg=>React.createElement(KernelCard,{pkg:pkg,key:pkg.id??pkg.name}))))}\n;// CONCATENATED MODULE: ./src/renderer/modules/discord.ts\nconst DiscordModules=memoize({get Moment(){return webpack.findByProps("momentProperties")}});/* harmony default export */ const modules_discord = (DiscordModules);\n;// CONCATENATED MODULE: ./src/renderer/modules/makelazy.ts\nfunction makeLazy(factory,fallback){return function LazyComponent(props){const[state,setState]=React.useState({resolved:false,value:void 0});React.useEffect(()=>{if(state.resolved)return;factory(props).then(value=>{setState({value,resolved:true})})},[state]);return state.resolved?state.value:React.createElement(fallback,props)}}\n;// CONCATENATED MODULE: ./src/renderer/modules/simplegit.ts\nconst period="@@@===@@@";const commitFields=["hash","hash_short","author","date","message"];const hashFields=["short","full"];const child_process=SettingsNative.requireModule("child_process");class Git{static executeCmd(cmd,cwd){return new Promise((resolve,reject)=>{child_process.exec(cmd,{cwd},(error,stdout)=>{if(error)return reject(error);resolve(stdout)})})}static async isInstalled(){try{await this.executeCmd("git --version");return true}catch{return false}}static async isRepo(cwd){try{const result=await this.executeCmd("git rev-parse --is-inside-work-tree",cwd);return result==="true"}catch{return false}}static async getBranchName(cwd){try{const result=await this.executeCmd("git branch -a",cwd);if(!result)return null;return result.slice(2,result.indexOf("\\n"))}catch(error){console.error(error);return null}}static async getLatestCommit(cwd,target="master"){try{return this.parsePeriods(hashFields,await this.executeCmd(`git log -1 ${target} --pretty=format:"%h${period}%H"`,cwd))}catch(error){console.error(error);return{hasError:true}}}static async getDiff(cwd,target="master"){try{const result=await this.executeCmd(`git log ${target}..origin/${target} --pretty=format:"%H${period}%h${period}%an${period}%ar${period}%s"`,cwd);if(!result)return[];return result.split("\\n").map(p=>this.parsePeriods(commitFields,p))}catch(error){console.error(error);return[]}}static parsePeriods(fields,out){return Object.fromEntries(out.split(period).map((c,i)=>[fields[i],c]))}}\n;// CONCATENATED MODULE: ./src/renderer/components/icons/shield.tsx\nfunction shield_extends(){shield_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return shield_extends.apply(this,arguments)}const Verified=props=>React.createElement("svg",shield_extends({xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},props),React.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),React.createElement("path",{d:"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z",fill:"currentColor"}));const Warning=props=>React.createElement("svg",shield_extends({xmlns:"http://www.w3.org/2000/svg","enable-background":"new 0 0 24 24",height:"24",viewBox:"0 0 24 24",width:"24"},props),React.createElement("g",null,React.createElement("path",{d:"M0,0h24v24H0V0z",fill:"none"})),React.createElement("g",null,React.createElement("path",{d:"M12,2L4,5v6.09c0,5.05,3.41,9.76,8,10.91c4.59-1.15,8-5.86,8-10.91V5L12,2z M13,16h-2v-2h2V16z M13,12h-2V7h2V12z",fill:"currentColor"})));var Types;(function(Types){Types["VERIFIED"]="VERIFIED";Types["WARNING"]="WARNING"})(Types||(Types={}));const Shield=({type,...props})=>{switch(type){case Types.VERIFIED:return React.createElement(Verified,shield_extends({},props));case Types.WARNING:return React.createElement(Warning,shield_extends({},props));default:return null}};Shield.Types=Types;/* harmony default export */ const shield = (Shield);\n;// CONCATENATED MODULE: ./src/renderer/components/icons/update_available.tsx\nfunction update_available_extends(){update_available_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return update_available_extends.apply(this,arguments)}function UpdateAvailable(props){return React.createElement("svg",update_available_extends({className:"ks-update-available","aria-hidden":"false",width:"16",height:"16",viewBox:"0 0 24 24"},props),React.createElement("g",{fill:"none","fill-rule":"evenodd"},React.createElement("path",{fill:"currentColor","fill-rule":"nonzero",d:"M5,8 L9,12 L6,12 C6,15.31 8.69,18 12,18 C13.01,18 13.97,17.75 14.8,17.3 L16.26,18.76 C15.03,19.54 13.57,20 12,20 C7.58,20 4,16.42 4,12 L1,12 L5,8 Z M18,12 C18,8.69 15.31,6 12,6 C10.99,6 10.03,6.25 9.2,6.7 L7.74,5.24 C8.97,4.46 10.43,4 12,4 C16.42,4 20,7.58 20,12 L23,12 L19,16 L15,12 L18,12 Z"}),React.createElement("polygon",{points:"24 0 0 0 0 24 24 24"})))}\n;// CONCATENATED MODULE: ./src/renderer/components/primitives.tsx\nfunction Show({when,children,fallback=null}){return when?children:fallback}function Switch({children,default:def=null}){return children.find(child=>child?.props?.when)??def}function Match({when,children}){return children}function For({each,children}){const result=[];for(let i=0;i<each.length;i++){result.push(children(each[i],i))}return React.createElement(React.Fragment,null,result)}\n;// CONCATENATED MODULE: ./src/renderer/components/updates.tsx\nconst updates_fs=SettingsNative.requireModule("fs");function useGitCommand(factory,deps){const[state,setState]=React.useState({loaded:false,result:null});const handleFetch=()=>{Promise.resolve(factory()).then(result=>{setState({loaded:typeof result==="boolean"?true:!!result,result:result})}).catch(console.error)};React.useEffect(handleFetch,deps??[]);return{...state,fetch(){setState({loaded:false,result:null});handleFetch()}}}const LoadingSpinner=()=>{const{Spinner}=discord;return React.createElement(Spinner,{type:Spinner.Type.LOW_MOTION,className:"ksu-spinner"})};const CurrentBranch=makeLazy(async({gitLoaded})=>{if(!gitLoaded)return null;const{Link}=discord;const branch=await Git.getBranchName(updates_fs.current);return React.createElement(Link,{href:`https://github.com/strencher-kernel/settings/tree/${branch}`},branch)},LoadingSpinner);const CurrentCommitHash=makeLazy(async({gitLoaded})=>{if(!gitLoaded)return null;const{Text,Link}=discord;const hash=await Git.getLatestCommit(updates_fs.current,await Git.getBranchName(updates_fs.current));if(hash.hasError)return React.createElement(Text,{color:Text.Colors.RED},"error");return React.createElement(Link,{href:`https://github.com/strencher-kernel/settings/tree/${hash.full}`},hash.short)},LoadingSpinner);let needsReload=false;function UpdaterPanel(){const{Moment}=modules_discord;const[errorMessage,setError]=React.useState(null);const{Link,Button,Text,Flex,Forms:{FormTitle,FormNotice,FormDivider,FormItem},Spinner}=discord;const git=useGitCommand(()=>Git.isInstalled());const updates=useGitCommand(async()=>{if(!git.loaded||!git.result)return[];return Git.getDiff(updates_fs.current)},[git.loaded]);const lastUpdate=Moment(Storage.use(()=>Storage.get("updater.lastFetch",new Date)));return React.createElement("div",{className:"kernel-panel"},React.createElement(FormTitle,{tag:FormTitle.Tags.H1},"Updates"),React.createElement(Show,{when:git.loaded,fallback:React.createElement(Spinner,{type:Spinner.Type.WANDERING_CUBES})},React.createElement(Show,{when:!git.result},React.createElement(FormNotice,{type:FormNotice.Types.DANGER,className:"ks-marginBottom20",title:"Git installation not found!",imageData:{src:"/assets/6e97f6643e7df29b26571d96430e92f4.svg",width:60,height:60},body:React.createElement("span",null,"Currently KernelSettings relies on your local git installation. Please install git to use this updater.")})),React.createElement(Show,{when:errorMessage!=null},React.createElement(FormNotice,{type:FormNotice.Types.DANGER,className:"ks-marginBottom20",title:"Error occurred",imageData:{src:"/assets/6e97f6643e7df29b26571d96430e92f4.svg",width:60,height:60},body:React.createElement("span",null,errorMessage)})),React.createElement(Show,{when:errorMessage==null&&needsReload},React.createElement(FormNotice,{type:FormNotice.Types.WARNING,className:"ks-marginBottom20",title:"Reload required",imageData:{src:"/assets/6e97f6643e7df29b26571d96430e92f4.svg",width:60,height:60},body:React.createElement("span",null,"Client reload is required in order to make changes take affect.")})),React.createElement(Show,{when:git.result},React.createElement(Flex,{className:"ksu-card",direction:Flex.Direction.VERTICAL},React.createElement(Flex,{justify:Flex.Justify.BETWEEN,align:Flex.Align.CENTER},React.createElement(Flex,{className:"ksu-shield-container",direction:Flex.Direction.HORIZONTAL,align:Flex.Align.START,justify:Flex.Justify.CENTER},React.createElement(Show,{when:updates.loaded,fallback:React.createElement(UpdateAvailable,{width:"70",height:"70",className:"ks-update-available ksu-shield"})},React.createElement(shield,{type:updates.result?.length>0?shield.Types.WARNING:shield.Types.VERIFIED,width:"70",height:"70",className:`ksu-shield ${updates.result?.length>0?"ksu-shield-warn":"ksu-shield-ok"}`})),React.createElement(Flex.Child,null,React.createElement(Text,{size:Text.Sizes.SIZE_24,color:Text.Colors.HEADER_PRIMARY},React.createElement(Switch,{default:"Everything is up to date!"},React.createElement(Match,{when:!updates.loaded},"Loading..."),React.createElement(Match,{when:updates.result?.length>0},"Something needs to be updated!"))),React.createElement(Text,{size:Text.Sizes.SIZE_14,color:Text.Colors.HEADER_SECONDARY},"Last Checked: ",lastUpdate.calendar()))),React.createElement("div",{className:"ksu-git-info"},React.createElement(Text,{className:"ksu-git-info-item"},"Branch: ",React.createElement(CurrentBranch,{gitLoaded:!!git.result})),React.createElement(Text,{className:"ksu-git-info-item"},"Commit: ",React.createElement(CurrentCommitHash,{gitLoaded:!!git.result})))),React.createElement(FormDivider,{className:"ksu-divider"}),React.createElement(Flex,{direction:Flex.Direction.HORIZONTAL},React.createElement(Button,{disabled:!updates.loaded,color:Button.Colors.BRAND,size:Button.Sizes.SMALL,className:"ksu-button",onClick:()=>{updates.fetch();Storage.set("updater.lastFetch",new Date)}},"Check for Updates"),React.createElement(Show,{when:updates.result?.length>0},React.createElement(Button,{disabled:!updates.loaded,color:Button.Colors.YELLOW,size:Button.Sizes.SMALL,className:"ksu-button",onClick:()=>{Git.executeCmd("git pull",updates_fs.current).then(()=>{needsReload=true;updates.fetch()}).catch(error=>{Logger.error("Updater","Failed to update!",error);setError("Error occurred while updating kernel settings. Check your console (Ctrl/Cmd + Shift + I) and report any errors.")})}},"Update")),React.createElement(Show,{when:needsReload},React.createElement(Button,{color:Button.Colors.GREEN,size:Button.Sizes.SMALL,className:"ksu-button ksu-reload-button",onClick:()=>{window.location.reload()}},"Reload ",React.createElement(UpdateAvailable,null)))),React.createElement(Show,{when:updates.result?.length>0},React.createElement(FormDivider,{className:"ksu-divider"}),React.createElement(FormItem,{title:"Recent Commits",tag:"h5"},React.createElement(For,{each:updates.result},(commit,index)=>React.createElement("div",{className:"ksu-commit",key:index},React.createElement("span",{className:"ksu-commit-hash"},React.createElement(Link,{href:`https://github.com/strencher-kernel/settings/commit/${commit.hash}`},commit.hash_short)),React.createElement("span",{className:"ksu-commit-name"},commit.message),React.createElement("span",{className:"ksu-commit-author-label"}," by "),React.createElement("span",{className:"ksu-commit-author"},React.createElement("img",{className:"ksu-commit-author-avatar",src:`https://github.com/${commit.author}.png?size=20`}),React.createElement("span",{className:"ksu-commit-author-name"},commit.author))))))))))}\n;// CONCATENATED MODULE: ./src/renderer/modules/patcher.ts\nvar Patcher;(function(Patcher){const patches=new Set;function patch(module,func,callback,before=false){const original=module[func];const unpatch=()=>{module[func]=original};module[func]=function(){if(before){try{Reflect.apply(callback,this,arguments)}catch(error){console.error("[Kernel:patcher] Error during before patch:",error)}}let returnValue=Reflect.apply(original,this,arguments);if(before)return returnValue;try{const tempRet=Reflect.apply(callback,this,[arguments,returnValue]);if(tempRet!=null)returnValue=tempRet}catch(error1){console.error("[Kernel:patcher] Error during patch:",error1)}return returnValue};Object.assign(module[func],original,{toString(){return original.toString()}});patches.add(unpatch);return unpatch}Patcher.patch=patch;function unpatchAll(){for(const unpatch of patches)unpatch()}Patcher.unpatchAll=unpatchAll})(Patcher||(Patcher={}))\n;// CONCATENATED MODULE: ./src/renderer/modules/settings.ts\nconst win=window;var SettingsRenderer;(function(SettingsRenderer1){let initialized=false;var panels=SettingsRenderer1.panels=win["__kernel_settings_cache__"]??[{section:"DIVIDER"},{section:"HEADER",label:"Kernel",id:"kernel-settings"}];function register(name,render){const panel={section:`Kernel-${name}`,label:name,id:`kernel-settings-${name}`,className:`kernel-settings`,element:typeof render==="function"?render:render.render,...typeof render==="object"?render:{}};SettingsRenderer.panels.push(panel);SettingsRenderer.panels.sort((a,b)=>a.order-b.order);return()=>{const index=SettingsRenderer.panels.indexOf(panel);if(index<0)return false;SettingsRenderer.panels.splice(index,1);return true}}SettingsRenderer1.register=register;async function initialize(){if(initialized)return;initialized=true;const SettingsView=await webpack.findLazy(webpack.Filters.byDisplayName("SettingsView"));if(!win["__kernel_settings_cache__"])Patcher.patch(SettingsView.prototype,"getPredicateSections",function(_,res){if(!Array.isArray(res)||!res.some(e=>e?.section?.toLowerCase()==="changelog")||res.some(s=>s?.id==="kernel-settings"))return;const index=res.findIndex(s=>s?.section?.toLowerCase()==="changelog")-1;if(index<0)return;res.splice(index,0,...SettingsRenderer.panels)});events.addEventListener("reload-core",()=>{win["__kernel_settings_cache__"]=panels})}SettingsRenderer1.initialize=initialize})(SettingsRenderer||(SettingsRenderer={}))\n;// CONCATENATED MODULE: ./src/renderer/index.tsx\nconst renderer_fs=SettingsNative.requireModule("fs");const renderer_path=SettingsNative.requireModule("path");var Core;(function(Core){let styleElement=null;async function start(){await webpack.whenReady;Logger.log("Core","Started.");window.React=webpack.findByProps("createElement","useEffect");if(false){}SettingsRenderer.initialize();registerSettings();Storage.initialize();loadStyles();exposeGlobals()}Core.start=start;function registerSettings(){let flush=[SettingsRenderer.register("Updates",{render:()=>React.createElement(UpdaterPanel,null),order:2}),SettingsRenderer.register("Packages",{render:()=>React.createElement(KernelPanel,null),order:1})];events.addEventListener("reload-core",()=>{for(let i=0;i<flush.length;i++){flush[i]()}})}Core.registerSettings=registerSettings;function exposeGlobals(){const Dispatcher=webpack.findByProps("_dispatch","dispatch");Object.defineProperties(window,{KernelSettings:{value:Object.freeze(SettingsRenderer),configurable:true,writable:true},KernelStorage:{value:Object.freeze(Storage),configurable:true,writable:true}});Dispatcher.wait(()=>Dispatcher.dispatch({type:"KERNEL_SETTINGS_INIT"}))}Core.exposeGlobals=exposeGlobals;function loadStyles(){const location=renderer_path.resolve(renderer_fs.current,"style.css");if(!renderer_fs.isFile(location))return;const load=function(){const styles=renderer_fs.readFile(location,"utf8");styleElement=document.head.appendChild(Object.assign(document.createElement("style"),{id:"kernel-style",textContent:styles}))};load();events.addEventListener("reload-css",()=>{styleElement.remove();load();Logger.log("Styles","Reloaded.")})}Core.loadStyles=loadStyles;function stop(){Patcher.unpatchAll();styleElement?.remove()}Core.stop=stop})(Core||(Core={}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///575\n')}},__webpack_require__={d:(Q,I)=>{for(var F in I)__webpack_require__.o(I,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:I[F]})},o:(Q,I)=>Object.prototype.hasOwnProperty.call(Q,I)},__webpack_exports__={};__webpack_modules__[575](0,__webpack_exports__,__webpack_require__);var __webpack_exports__Core=__webpack_exports__.Q;export{__webpack_exports__Core as Core};